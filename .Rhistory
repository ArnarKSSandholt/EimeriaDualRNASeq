kegg_cat_list <- get_de_kegg_cat_genes(topgenes_chicken_list,"gga", kegg_immune_categories[i], egSYMBOL)
immune_genes <- c(immune_genes, kegg_cat_list[[1]]$gene_name)
}
immune_genes <- c(immune_genes, immune_classified_genes$gene_name)
immune_genes <- unique(immune_genes)
m <- match(immune_genes, rownames(chicken_logfc_df))
m <- m[complete.cases(m)]
chicken_immune_gene_logfc_df <- chicken_logfc_df[m,]
m <- match(immune_genes, rownames(chicken_logfc_df_filt))
m <- m[complete.cases(m)]
chicken_immune_gene_logfc_df_filt <- chicken_logfc_df_filt[m,]
heatmap_path <- "figures/heatmaps/chicken_immune_genes_logfc.png"
png(heatmap_path, width = 1500, height = 2000, pointsize = 100)
aspectHeatmap(as.matrix(chicken_immune_gene_logfc_df), Colv = NA,
xlab = "Timepoints", main = "Chicken immune gene log fold change",
col = colorRampPalette(brewer.pal(9, "RdYlGn"))(500),
hExp = 5.5, wExp = 0.8)
dev.off()
heatmap_path <- "figures/heatmaps/chicken_immune_genes_logfc_filt.png"
png(heatmap_path, width = 1000, height = 1600, pointsize = 20)
aspectHeatmap(as.matrix(chicken_immune_gene_logfc_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken immune gene log fold change",
col = colorRampPalette(brewer.pal(9, "RdYlGn"))(500),
hExp = 2.3)
dev.off()
# Eimeria GO and KEGG analysis
# Import the file containing GO annotations downloaded from ToxoDB and KEGG annotations found through the KEGG KAAS service
path_to_eimeria_go_file <- "data/eimeria_go_kegg_annotation/GenesByGoTerm_Summary.csv"
path_to_eimeria_kegg_file <- "data/eimeria_go_kegg_annotation/eimeria_kegg_annotation.tsv"
path_to_transcript_to_gene_file <- "data/reference_genomes/eimeria_transcript_to_gene.tsv"
eimeria_go_annotation <- read.delim(path_to_eimeria_go_file, sep = ",", check.names=FALSE, stringsAsFactors=FALSE)
eimeria_kegg_best_cat_list <- read.delim(path_to_eimeria_kegg_file, check.names=FALSE, stringsAsFactors=FALSE, header = FALSE)
eimeria_transcript_to_gene <- read.delim(path_to_transcript_to_gene_file, check.names=FALSE, stringsAsFactors=FALSE, header = FALSE)
# Create a new dataframe with seperate entries for each gene for each GO category it belongs to
eimeria_full_go <- as.data.frame(matrix(0,
ncol = ncol(eimeria_go_annotation),
nrow = nrow(eimeria_go_annotation)))
colnames(eimeria_full_go) <- colnames(eimeria_go_annotation)
i <- 0
j <- 1
len_eimeria_go <- dim(eimeria_go_annotation)[1]
while (i < len_eimeria_go) {
go_cats <- strsplit(eimeria_go_annotation$`Computed GO Process IDs`[i+1], ";")[[1]]
go_cats_description <- strsplit(eimeria_go_annotation$`Computed GO Processes`[i+1], ";")[[1]]
k <- 1
len_go_cats <- length(go_cats)
while (k <= len_go_cats) {
eimeria_full_go[j,] <- eimeria_go_annotation[i+1,]
eimeria_full_go[j,"Computed GO Process IDs"] <- go_cats[k]
eimeria_full_go[j,"Computed GO Processes"] <- go_cats_description[k]
k <- k + 1
j <- j + 1
}
i <- i + 1
}
eimeria_go_analysis <- function(topgenes_eimeria, eimeria_full_go, eimeria_go_cats, fdr_thresh, logfc_thresh, ont) {
# Function for computing gene membership in GO categories
FDR_significant_genes <- topgenes_eimeria$table[topgenes_eimeria$table$FDR < fdr_thresh,]
num_significant_genes <- c(dim(FDR_significant_genes[FDR_significant_genes$logFC > logfc_thresh,])[1],
dim(FDR_significant_genes[FDR_significant_genes$logFC < -logfc_thresh,])[1])
eimeria_go_results <- as.data.frame(matrix(0, ncol = 8, nrow = length(eimeria_go_cats)))
colnames(eimeria_go_results) <- c("GO_ID", "Term", "Ont", "N", "Up", "Down", "P.Up", "P.Down")
i <- 1
neg_logfc_thresh <- -logfc_thresh
for (eimeria_go_cat in eimeria_go_cats) {
genes_in_go <- eimeria_full_go[eimeria_full_go$`Computed GO Process IDs` == eimeria_go_cat,]
eimeria_go_cat_term <- genes_in_go[1,"Computed GO Processes"]
N <- dim(genes_in_go)[1]
m <- match(genes_in_go$`Gene ID`, topgenes_eimeria$table$locus_tag)
if (!is.na(m[1])) {
m <- m[complete.cases(m)]
topgenes_eimeria_go_cat <- topgenes_eimeria$table[m,]
topgenes_eimeria_go_cat <- topgenes_eimeria_go_cat[topgenes_eimeria_go_cat$FDR < fdr_thresh,]
if (dim(topgenes_eimeria_go_cat)[1] != 0) {
num_up_genes <- nrow(topgenes_eimeria_go_cat[topgenes_eimeria_go_cat$logFC >= logfc_thresh,])
num_down_genes <- nrow(topgenes_eimeria_go_cat[topgenes_eimeria_go_cat$logFC <= neg_logfc_thresh,])
} else {
num_up_genes <- 0
num_down_genes <- 0
}
} else {
num_up_genes <- 0
num_down_genes <- 0
}
x <- c(num_up_genes, num_down_genes)
n <- dim(topgenes_eimeria)[1] - N
k <- num_significant_genes
fisher_up <- fisher.test(matrix(c(x[1],k[1]-x[1],N-x[1],n-(k[1]-x[1])),nrow=2,ncol=2),alternative="greater")
fisher_down <- fisher.test(matrix(c(x[2],k[2]-x[2],N-x[2],n-(k[2]-x[2])),nrow=2,ncol=2),alternative="greater")
go_cat_results <- data.frame(eimeria_go_cat, eimeria_go_cat_term, ont, N, num_up_genes, num_down_genes,
fisher_up$p.value, fisher_down$p.value, stringsAsFactors = FALSE)
eimeria_go_results[i,] <- go_cat_results[1,]
i <- i + 1
}
rownames(eimeria_go_results) <- eimeria_go_results$GO_ID
eimeria_go_results <- eimeria_go_results[,-1]
return(eimeria_go_results)
}
# Get the number of genes that are up or down regulated in each GO category
eimeria_go_cats <- unique(eimeria_full_go$`Computed GO Process IDs`)
allgo_eimeria_list <- lapply(topgenes_eimeria_list,
function(x) eimeria_go_analysis(x, eimeria_full_go, eimeria_go_cats, fdr_threshold, fdr_threshold, "BP"))
# Preprocessing of KEGG data for the KEGG enrichment analaysis
genes_in_analysis <- topgenes_eimeria_list[[1]]$table$entrez_gene_id
m <- match(genes_in_analysis, eimeria_transcript_to_gene[,1])
transcripts_in_analysis <- eimeria_transcript_to_gene[m,]
m <- match(transcripts_in_analysis[,2], eimeria_kegg_best_cat_list[,1])
kegg_ids_in_analysis <- eimeria_kegg_best_cat_list[m,2]
eimeria_kegg_genes <- data.frame(transcripts_in_analysis, kegg_ids_in_analysis)
eimeria_kegg_genes <- eimeria_kegg_genes[eimeria_kegg_genes[,3] != "",]
eimeria_kegg_id_universe <- eimeria_kegg_best_cat_list[eimeria_kegg_best_cat_list[,2] != "",2]
gene_to_pathway <- keggLink("pathway", "ko")
pathway_to_term <- keggList("pathway")
m <- match(eimeria_kegg_genes[,3], substr(names(gene_to_pathway), 4, nchar(gene_to_pathway[1])))
eimeria_kegg_genes <- eimeria_kegg_genes[!is.na(m),]
gene_pathways <- gene_to_pathway[m[complete.cases(m)]]
m <- match(gene_pathways, names(pathway_to_term))
pathway_terms <- pathway_to_term[m]
eimeria_kegg_annotation <- data.frame(genes = eimeria_kegg_genes[,1], kegg_pathway = gene_pathways,
kegg_term = pathway_terms, stringsAsFactors = FALSE)
m <- match(eimeria_kegg_id_universe, substr(names(gene_to_pathway), 4, nchar(gene_to_pathway[1])))
gene_universe_pathways <- gene_to_pathway[m[complete.cases(m)]]
eimeria_kegg_cats <- unique(gene_universe_pathways)
eimeria_kegg_analysis <- function(topgenes_eimeria, eimeria_kegg_annotation, eimeria_kegg_cats,
eimeria_universe, fdr_thresh, logfc_thresh) {
# Function for computing gene membership in KEGG categories
# Uses KEGGREST to access data from the KEGG database
FDR_significant_genes <- topgenes_eimeria$table[topgenes_eimeria$table$FDR < fdr_thresh,]
num_significant_genes <- c(dim(FDR_significant_genes[FDR_significant_genes$logFC > logfc_thresh,])[1],
dim(FDR_significant_genes[FDR_significant_genes$logFC < -logfc_thresh,])[1])
eimeria_kegg_results <- as.data.frame(matrix(0, ncol = 7, nrow = length(eimeria_kegg_cats)))
colnames(eimeria_kegg_results) <- c("KEGG_ID", "Term", "N", "Up", "Down", "P.Up", "P.Down")
i <- 1
neg_logfc_thresh <- -logfc_thresh
for (eimeria_kegg_cat in eimeria_kegg_cats) {
genes_in_kegg <- eimeria_kegg_annotation[eimeria_kegg_annotation$kegg_pathway == eimeria_kegg_cat,]
eimeria_kegg_cat_term <- genes_in_kegg[1,"kegg_term"]
N <- length(eimeria_universe[eimeria_universe == eimeria_kegg_cat])
m <- match(genes_in_kegg$genes, topgenes_eimeria$table$entrez_gene_id)
if (!is.na(m[1])) {
m <- m[complete.cases(m)]
topgenes_eimeria_kegg_cat <- topgenes_eimeria$table[m,]
topgenes_eimeria_kegg_cat <- topgenes_eimeria_kegg_cat[topgenes_eimeria_kegg_cat$FDR < fdr_thresh,]
if (dim(topgenes_eimeria_kegg_cat)[1] != 0) {
num_up_genes <- nrow(topgenes_eimeria_kegg_cat[topgenes_eimeria_kegg_cat$logFC >= logfc_thresh,])
num_down_genes <- nrow(topgenes_eimeria_kegg_cat[topgenes_eimeria_kegg_cat$logFC <= neg_logfc_thresh,])
} else {
num_up_genes <- 0
num_down_genes <- 0
}
} else {
num_up_genes <- 0
num_down_genes <- 0
}
x <- c(num_up_genes, num_down_genes)
n <- dim(topgenes_eimeria)[1] - N
k <- num_significant_genes
fisher_up <- fisher.test(matrix(c(x[1],k[1]-x[1],N-x[1],n-(k[1]-x[1])),nrow=2,ncol=2),alternative="greater")
fisher_down <- fisher.test(matrix(c(x[2],k[2]-x[2],N-x[2],n-(k[2]-x[2])),nrow=2,ncol=2),alternative="greater")
kegg_cat_results <- data.frame(eimeria_kegg_cat, eimeria_kegg_cat_term, N, num_up_genes, num_down_genes,
fisher_up$p.value, fisher_down$p.value, stringsAsFactors = FALSE)
eimeria_kegg_results[i,] <- kegg_cat_results[1,]
i <- i + 1
}
rownames(eimeria_kegg_results) <- eimeria_kegg_results$KEGG_ID
eimeria_kegg_results <- eimeria_kegg_results[,-1]
return(eimeria_kegg_results)
}
allkegg_eimeria_list <- lapply(topgenes_eimeria_list,
function(x) eimeria_kegg_analysis(x, eimeria_kegg_annotation, eimeria_kegg_cats,
gene_universe_pathways, fdr_threshold, 1))
# Export the top 50 most significantly enriched GO categories and KEGG pathways
i <- 0
while (i < length(allgo_eimeria_list)) {
i <- i + 1
go_path <- paste("results/de_analysis/top_go_kegg_tables/top_go_eimeria_", timepoints[i], ".csv", sep = "")
kegg_path <- paste("results/de_analysis/top_go_kegg_tables/top_kegg_eimeria_", timepoints[i], ".csv", sep = "")
min_pval_go <- pmin(allgo_eimeria_list[[i]]$P.Up, allgo_eimeria_list[[i]]$P.Down)
min_pval_kegg <- pmin(allkegg_eimeria_list[[i]]$P.Up, allkegg_eimeria_list[[i]]$P.Down)
allgo_eimeria_list[[i]] <- allgo_eimeria_list[[i]][order(min_pval_go),]
allkegg_eimeria_list[[i]] <- allkegg_eimeria_list[[i]][order(min_pval_kegg),]
write.csv(allgo_eimeria_list[[i]][1:50,], go_path)
write.csv(allkegg_eimeria_list[[i]][1:50,], kegg_path)
}
# Immune related E. tenella genes are plotted here
immune_related_eimeria_gene <- "ETH_00030475"
cat_gene_ids <- immune_related_eimeria_gene
cat_gene_list <- lapply(topgenes_eimeria_list, function(x) x$table[match(cat_gene_ids, x$table$locus_tag),])
cat_gene_list <- lapply(cat_gene_list, function(x) {colnames(x) <- c("entrez_gene_id", "gene_name", "logFC", "logCPM", "F", "PValue", "FDR")
return(x)})
cat_title <- "Eimeria immune activating genes"
cat_plot_path <- "figures/expression_line_plots/eimeria_immune_activating_genes.png"
plot_de_cat_genes(cat_gene_list, c(2,4,12,24,48,72), cat_title, fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 1, num_samples_logfc_thresh = 1,
cat_plot_path)
# Look at what limited GO and KEGG category information is available on E. tenella
apoptosis_affecting_go <- get_child_nodes("GO:0052040")
apoptosis_affecting_go_eimeria <- allgo_eimeria_list[[1]][match(apoptosis_affecting_go$child_go_id, rownames(allgo_eimeria_list[[1]])),]
kegg_immune_categories_eimeria <- c("path:map04640", "path:map04610", "path:map04611", "path:map04620", "path:map04624",
"path:map04621", "path:map04622", "path:map04623", "path:map04625", "path:map04650",
"path:map04612", "path:map04660", "path:map04658", "path:map04659", "path:map04657",
"path:map04662", "path:map04664", "path:map04666", "path:map04670", "path:map04672",
"path:map04062")
m <- match(kegg_immune_categories_eimeria, rownames(allkegg_eimeria_list[[1]]))
m <- m[complete.cases(m)]
immune_related_kegg_eimeria_list <- lapply(allkegg_eimeria_list, function(x) x[m,])
# Make a line plot of the percentage of Eimeria reads at different time points
eimeria_perc_df <- data.frame(eimeria_perc = c(0.5169, 1.2126, 0.586, 1.744566667, 5.391266667, 2.809),
timepoints = c(2, 4, 12, 24, 48, 72))
png("figures/eimeria_sample_fraction.png", width = 1200, height = 800)
p <- ggplot(eimeria_perc_df, aes(x = timepoints, y = eimeria_perc)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
coord_cartesian(xlim = c(0, 80)) +
scale_x_discrete(limits=eimeria_perc_df$timepoints) +
theme_bw() +
ggtitle(expression(paste(italic("E. tenella"), " average sample fraction"))) +
theme(plot.title = element_text(hjust = 0.5, size = 40),
axis.text = element_text(size = 30),
axis.title = element_text(size = 30)) +
xlab("Time post-infection [h]") + ylab("E tenella fraction [%]")
print(p)
dev.off()
# Analyze Eimeria SAG genes
eimeria_product_df <- read.delim("data/reference_genomes/eimeria_gene_products.csv",
col.names = c("gene_name", "entrez_gene_id", "product"), stringsAsFactors = FALSE)
eimeria_SAG_genes <- eimeria_product_df[grep("sag", eimeria_product_df$product),]
eimeria_SAG_genes <- eimeria_SAG_genes[eimeria_SAG_genes$entrez_gene_id %in% topgenes_eimeria_list[[1]]$table$entrez_gene_id,]
eimeria_SAG_gene_ids <- eimeria_SAG_genes$entrez_gene_id
SAG_gene_list <- lapply(topgenes_eimeria_list, function(x) x$table[match(eimeria_SAG_gene_ids, x$table$entrez_gene_id),])
SAG_gene_list <- lapply(SAG_gene_list, function(x) {colnames(x) <- c("entrez_gene_id", "gene_name", "logFC", "logCPM", "F", "PValue", "FDR")
return(x)})
SAG_gene_list <- lapply(SAG_gene_list, function(x) {x$gene_name <- eimeria_SAG_genes$product
return(x)})
SAG_title <- expression(paste(italic("E. tenella"), " SAG gene expression"))
SAG_plot_path <- "figures/expression_line_plots/SAG_genes.png"
plot_de_cat_genes(SAG_gene_list, c(2,4,12,24,48,72), SAG_title, fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 1, num_samples_logfc_thresh = 1,
SAG_plot_path, plot_scale = c(-12.5,12.5))
reference()
citation("ClassDiscovery")
citation("RColorBrewer")
png("figures/eimeria_sample_fraction.png", width = 1200, height = 800)
p <- ggplot(eimeria_perc_df, aes(x = timepoints, y = eimeria_perc)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
coord_cartesian(xlim = c(0, 80), ylim = c(0,5)) +
scale_x_discrete(limits=eimeria_perc_df$timepoints) +
theme_bw() +
ggtitle(expression(paste(italic("E. tenella"), " average sample fraction"))) +
theme(plot.title = element_text(hjust = 0.5, size = 40),
axis.text = element_text(size = 30),
axis.title = element_text(size = 30)) +
xlab("Time post-infection [h]") + ylab("E tenella fraction [%]")
print(p)
dev.off()
png("figures/eimeria_sample_fraction.png", width = 1200, height = 800)
p <- ggplot(eimeria_perc_df, aes(x = timepoints, y = eimeria_perc)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
coord_cartesian(xlim = c(0, 80), ylim = c(0,5.5)) +
scale_x_discrete(limits=eimeria_perc_df$timepoints) +
theme_bw() +
ggtitle(expression(paste(italic("E. tenella"), " average sample fraction"))) +
theme(plot.title = element_text(hjust = 0.5, size = 40),
axis.text = element_text(size = 30),
axis.title = element_text(size = 30)) +
xlab("Time post-infection [h]") + ylab("E tenella fraction [%]")
print(p)
dev.off()
png("figures/eimeria_sample_fraction.png", width = 1200, height = 800)
p <- ggplot(eimeria_perc_df, aes(x = timepoints, y = eimeria_perc)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
coord_cartesian(xlim = c(0, 80), ylim = c(0,6)) +
scale_x_discrete(limits=eimeria_perc_df$timepoints) +
theme_bw() +
ggtitle(expression(paste(italic("E. tenella"), " average sample fraction"))) +
theme(plot.title = element_text(hjust = 0.5, size = 40),
axis.text = element_text(size = 30),
axis.title = element_text(size = 30)) +
xlab("Time post-infection [h]") + ylab("E tenella fraction [%]")
print(p)
dev.off()
png("figures/eimeria_sample_fraction.png", width = 1200, height = 800)
p <- ggplot(eimeria_perc_df, aes(x = timepoints, y = eimeria_perc)) +
geom_point(size = 5) +
scale_x_discrete(limits=eimeria_perc_df$timepoints) +
ggtitle(expression(paste(italic("E. tenella"), " average sample fraction"))) +
axis.text = element_text(size = 30),
xlab("Time post-infection [h]") + ylab("E tenella fraction [%]")
png("figures/eimeria_sample_fraction.png", width = 1200, height = 800)
p <- ggplot(eimeria_perc_df, aes(x = timepoints, y = eimeria_perc)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
coord_cartesian(xlim = c(0, 80)) +
scale_x_discrete(limits=eimeria_perc_df$timepoints) +
theme_bw() +
ggtitle(expression(paste(italic("E. tenella"), " average sample fraction"))) +
theme(plot.title = element_text(hjust = 0.5, size = 40),
axis.text = element_text(size = 30),
axis.title = element_text(size = 30)) +
xlab("Time post-infection [h]") + ylab("E tenella fraction [%]")
print(p)
dev.off()
eimeria_product_df <- read.delim("data/reference_genomes/eimeria_gene_products.csv",
col.names = c("gene_name", "entrez_gene_id", "product"), stringsAsFactors = FALSE)
png("figures/eimeria_sample_fraction.png", width = 1200, height = 800)
p <- ggplot(eimeria_perc_df, aes(x = timepoints, y = eimeria_perc)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
coord_cartesian(xlim = c(0, 80), ylim = c(0.2, 5.4)) +
scale_x_discrete(limits=eimeria_perc_df$timepoints) +
theme_bw() +
ggtitle(expression(paste(italic("E. tenella"), " average sample fraction"))) +
theme(plot.title = element_text(hjust = 0.5, size = 40),
axis.text = element_text(size = 30),
axis.title = element_text(size = 30)) +
xlab("Time post-infection [h]") + ylab("E tenella fraction [%]")
print(p)
dev.off()
png("figures/eimeria_sample_fraction.png", width = 1200, height = 800)
p <- ggplot(eimeria_perc_df, aes(x = timepoints, y = eimeria_perc)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
coord_cartesian(xlim = c(0, 80), ylim = c(0.1, 5.4)) +
scale_x_discrete(limits=eimeria_perc_df$timepoints) +
theme_bw() +
ggtitle(expression(paste(italic("E. tenella"), " average sample fraction"))) +
theme(plot.title = element_text(hjust = 0.5, size = 40),
axis.text = element_text(size = 30),
axis.title = element_text(size = 30)) +
xlab("Time post-infection [h]") + ylab("E tenella fraction [%]")
print(p)
dev.off()
png("figures/eimeria_sample_fraction.png", width = 1200, height = 800)
p <- ggplot(eimeria_perc_df, aes(x = timepoints, y = eimeria_perc)) +
geom_line(size = 1.5) +
geom_point(size = 5) +
coord_cartesian(xlim = c(0, 80), ylim = c(0.2, 5.4)) +
scale_x_discrete(limits=eimeria_perc_df$timepoints) +
theme_bw() +
ggtitle(expression(paste(italic("E. tenella"), " average sample fraction"))) +
theme(plot.title = element_text(hjust = 0.5, size = 40),
axis.text = element_text(size = 30),
axis.title = element_text(size = 30)) +
xlab("Time post-infection [h]") + ylab("E tenella fraction [%]")
print(p)
dev.off()
i = 1
p <- EnhancedVolcano(topgenes_chicken_list[[i]]$table,
lab = rownames(topgenes_chicken_list[[i]]$table),
title = paste('Chicken', timepoints[i], "volcano plot"),
subtitle = "",
x = 'logFC',
y = 'FDR',
ylab = bquote(~-Log[10]~italic(FDR)),
xlim = c(-10,10),
ylim = c(0,10),
pointSize = 4,
labSize = 5,
pCutoff = fdr_threshold,
FCcutoff = logfc_threshold) +
theme(plot.title = element_text(hjust = 0.5, size = 20),
plot.subtitle = element_text(hjust = 0.5, size = 16),
legend.text = element_text(size = 16))
print(p)
?EnhancedVolcano
i = 1
while (i <= length(topgenes_chicken_list)) {
volcano_path <- paste("figures/volcano_plots/chicken_volcano_", timepoints[i], ".png", sep = "")
png(volcano_path, height = 500, width = 800)
p <- EnhancedVolcano(topgenes_chicken_list[[i]]$table,
lab = rownames(topgenes_chicken_list[[i]]$table),
title = paste('Chicken', timepoints[i], "volcano plot"),
subtitle = "",
x = 'logFC',
y = 'FDR',
xlim = c(-10,10),
ylim = c(0,10),
ylab = bquote(~-Log[10]~italic(FDR)),
legend = c("NS", "Log2 FC", "FDR", "FDR & Log2 FC"),
pointSize = 4,
labSize = 5,
pCutoff = fdr_threshold,
FCcutoff = logfc_threshold) +
theme(plot.title = element_text(hjust = 0.5, size = 20),
plot.subtitle = element_text(hjust = 0.5, size = 16),
legend.text = element_text(size = 16))
plot_list[[i]] <- p
print(p)
dev.off()
i = i + 1
}
volcano_path <- "figures/volcano_plots/all_chicken_plots.png"
png(volcano_path, height = 1200, width = 1200)
multiplot(plotlist = plot_list, cols = 2)
dev.off()
i = 1
while (i <= length(topgenes_eimeria_list)) {
volcano_path <- paste("figures/volcano_plots/eimeria_volcano_", timepoints[i], ".png", sep = "")
png(volcano_path, height = 500, width = 800)
p <- EnhancedVolcano(topgenes_eimeria_list[[i]]$table,
lab = rownames(topgenes_eimeria_list[[i]]$table),
title = bquote(bolditalic("E. tenella") ~ bold(.(timepoints[i]) ~ volcano~plot)),
subtitle = "",
x = 'logFC',
y = 'FDR',
xlim = c(-13, 13),
ylim = c(0, 40),
ylab = bquote(~-Log[10]~italic(FDR)),
legend = c("NS", "Log2 FC", "FDR", "FDR & Log2 FC"),
pointSize = 4,
labSize = 5,
pCutoff = fdr_threshold,
FCcutoff = logfc_threshold) +
theme(plot.title = element_text(hjust = 0.5, size = 20),
plot.subtitle = element_text(hjust = 0.5, size = 16),
legend.text = element_text(size = 16))
plot_list[[i]] <- p
print(p)
dev.off()
i = i + 1
}
volcano_path <- "figures/volcano_plots/all_eimeria_plots.png"
png(volcano_path, height = 1200, width = 1200)
multiplot(plotlist = plot_list, cols = 2)
dev.off()
i = 1
p <- EnhancedVolcano(topgenes_chicken_list[[i]]$table,
lab = rownames(topgenes_chicken_list[[i]]$table),
title = paste('Chicken', timepoints[i], "volcano plot"),
subtitle = "",
x = 'logFC',
y = 'FDR',
xlim = c(-10,10),
ylim = c(0,10),
ylab = bquote(~-Log[10]~italic(FDR)),
legend = c("NS", "Log2 FC", "FDR", "FDR & Log2 FC"),
pointSize = 4,
labSize = 5,
pCutoff = fdr_threshold,
FCcutoff = logfc_threshold) +
theme(plot.title = element_text(hjust = 0.5, size = 20),
plot.subtitle = element_text(hjust = 0.5, size = 16),
legend.text = element_text(size = 16))
print(p)
i = 1
while (i <= length(topgenes_chicken_list)) {
volcano_path <- paste("figures/volcano_plots/chicken_volcano_", timepoints[i], ".png", sep = "")
png(volcano_path, height = 500, width = 800)
p <- EnhancedVolcano(topgenes_chicken_list[[i]]$table,
lab = rownames(topgenes_chicken_list[[i]]$table),
title = paste('Chicken', timepoints[i], "volcano plot"),
subtitle = "",
x = 'logFC',
y = 'FDR',
xlim = c(-10,10),
ylim = c(0,10),
ylab = bquote(~-Log[10]~italic(FDR)),
legend = c("NS", "Log2 FC", "FDR", "FDR & Log2 FC"),
legendLabels = c('NS', expression(Log[2]~FC),
"FDR", expression(FDR~and~log[2]~FC)),
pointSize = 4,
labSize = 5,
pCutoff = fdr_threshold,
FCcutoff = logfc_threshold) +
theme(plot.title = element_text(hjust = 0.5, size = 20),
plot.subtitle = element_text(hjust = 0.5, size = 16),
legend.text = element_text(size = 16))
plot_list[[i]] <- p
print(p)
dev.off()
i = i + 1
}
volcano_path <- "figures/volcano_plots/all_chicken_plots.png"
png(volcano_path, height = 1200, width = 1200)
multiplot(plotlist = plot_list, cols = 2)
dev.off()
i = 1
while (i <= length(topgenes_eimeria_list)) {
volcano_path <- paste("figures/volcano_plots/eimeria_volcano_", timepoints[i], ".png", sep = "")
png(volcano_path, height = 500, width = 800)
p <- EnhancedVolcano(topgenes_eimeria_list[[i]]$table,
lab = rownames(topgenes_eimeria_list[[i]]$table),
title = bquote(bolditalic("E. tenella") ~ bold(.(timepoints[i]) ~ volcano~plot)),
subtitle = "",
x = 'logFC',
y = 'FDR',
xlim = c(-13, 13),
ylim = c(0, 40),
ylab = bquote(~-Log[10]~italic(FDR)),
legend = c("NS", "Log2 FC", "FDR", "FDR & Log2 FC"),
legendLabels = c('NS', expression(Log[2]~FC),
"FDR", expression(FDR~and~log[2]~FC)),
pointSize = 4,
labSize = 5,
pCutoff = fdr_threshold,
FCcutoff = logfc_threshold) +
theme(plot.title = element_text(hjust = 0.5, size = 20),
plot.subtitle = element_text(hjust = 0.5, size = 16),
legend.text = element_text(size = 16))
plot_list[[i]] <- p
print(p)
dev.off()
i = i + 1
}
volcano_path <- "figures/volcano_plots/all_eimeria_plots.png"
png(volcano_path, height = 1200, width = 1200)
multiplot(plotlist = plot_list, cols = 2)
dev.off()
?plotMDS
