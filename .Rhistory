curr_num_genes <- dim(de_cat_gene_df)[1]/num_conditions
de_cat_gene_df$gene_timepoints <- rep(experimental_conditions, curr_num_genes)
cat_plot_path <- gsub(".png", "_1.png", cat_plot_path)
plot_colors <- as.vector(polychrome(curr_num_genes))
plot_colors[2] <- "#b3b3b3ff"
if (FALSE %in% de_cat_gene_df$below_fdr_threshold) {
shapes <- c(1,17)
} else{
shapes <- 17
}
png(cat_plot_path, width = 1200, height = 800)
p <- ggplot(de_cat_gene_df, aes(x=gene_timepoints, y=logFC, group=gene_name)) +
geom_line(aes(color = gene_name), size = 1.5) +
scale_color_manual(values = plot_colors) +
geom_point(aes(shape=below_fdr_threshold, color = gene_name), size = 5) +
scale_shape_manual(values = shapes) +
scale_x_discrete(limits=experimental_conditions) +
theme_bw() +
theme(legend.title = element_text(size = 28),
legend.text = element_text(size = 20),
axis.text = element_text(size = 24),
axis.title = element_text(size = 24)) +
guides(color = guide_legend(order = 1, override.aes = list(shape = 17)),
shape = guide_legend(order = 2)) +
coord_cartesian(ylim = plot_scale, xlim = c(0, 80)) +
labs(shape = "Below FDR threshold", color = "Gene symbol") +
xlab("Sample time points") + ylab("log2(Fold change)") +
geom_hline(yintercept = 0)
print(p)
dev.off()
cat_plot_path <- gsub("_1.png", "_2.png", cat_plot_path)
de_cat_gene_df <- de_cat_gene_df_list[[2]]
curr_num_genes <- dim(de_cat_gene_df)[1]/num_conditions
}
de_cat_gene_df$gene_timepoints <- rep(experimental_conditions, curr_num_genes)
plot_colors <- as.vector(polychrome(curr_num_genes))
plot_colors[2] <- "#b3b3b3ff"
if (FALSE %in% de_cat_gene_df$below_fdr_threshold) {
shapes <- c(1,17)
} else{
shapes <- 17
}
png(cat_plot_path, width = 1200, height = 800)
p <- ggplot(de_cat_gene_df, aes(x=gene_timepoints, y=logFC, group=gene_name)) +
geom_line(aes(color = gene_name), size = 1.5) +
scale_color_manual(values = plot_colors) +
geom_point(aes(shape=below_fdr_threshold, color = gene_name), size = 5) +
scale_shape_manual(values = shapes) +
scale_x_discrete(limits=experimental_conditions) +
theme_bw() +
theme(legend.title = element_text(size = 28),
legend.text = element_text(size = 20),
axis.text = element_text(size = 24),
axis.title = element_text(size = 24),
legend.position = c(0.5,0.5),
legend.box = "horizontal",
legend.box.margin = margin(5, 5, 5, 5, "cm")) +
guides(color = guide_legend(order = 1, override.aes = list(shape = 17)),
shape = guide_legend(order = 2)) +
coord_cartesian(ylim = plot_scale, xlim = c(0, 80)) +
labs(shape = "Below FDR threshold", color = "Gene symbol") +
xlab("Time post-infection [h]") + ylab("log2(Fold change)") +
geom_hline(yintercept = 0)
print(p)
dev.off()
return(p)
}
# Plot a lineplot showing log fold change in each sample for the genes in the toll like KEGG pathway
plot_de_cat_genes(toll_like_gene_list, c(2,4,12,24,48,72), "Toll-like receptor signaling pathway gene expression", fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 1, num_samples_logfc_thresh = 1,
"figures/expression_line_plots/toll_like_receptor_plot.png")
tlr15_list <- lapply(topgenes_chicken_list, function(x) x$table["TLR15",])
tlr21_list <- lapply(topgenes_chicken_list, function(x) x$table["TLR21",])
plot_de_cat_genes(tlr15_list, c(2,4,12,24,48,72), "TLR15 expression", fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 0, num_samples_logfc_thresh = 0,
"figures/expression_line_plots/tlr15_expression.png")
plot_de_cat_genes(tlr21_list, c(2,4,12,24,48,72), "TLR21 expression", fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 0, num_samples_logfc_thresh = 0,
"figures/expression_line_plots/tlr21_expression.png")
path_to_immuno_gene_list <- "immune_classified_genes.csv"
immune_classified_genes <- read.delim(path_to_immuno_gene_list, check.names=FALSE, stringsAsFactors=FALSE)
immune_cats <- unique(immune_classified_genes$Category)
plot_list <- list()
i <- 0
while (i < length(immune_cats)) {
i <- i + 1
cat_gene_ids <- immune_classified_genes[immune_cats[i] == immune_classified_genes$Category,]$entrez_gene_id
cat_gene_list <- lapply(topgenes_chicken_list, function(x) x$table[match(cat_gene_ids, x$table$entrez_gene_id),])
if (immune_cats[i] == "mannose rec") {
j <- 0
while (j < length(cat_gene_list)) {
j <- j + 1
rownames(cat_gene_list[[j]]) <- c("MRC1LC", "MRC1LD", "MRC1LE", "MRC1LB", "MRC1LA", "MRC2", "PLA2R1")
cat_gene_list[[j]]$gene_name <- c("MRC1LC", "MRC1LD", "MRC1LE", "MRC1LB", "MRC1LA", "MRC2", "PLA2R1")
}
}
cat_title <- paste("Immune category", immune_cats[i], "gene expression")
cat_plot_path <- paste("figures/expression_line_plots/immune_cat_", gsub(" ", "_", gsub("/", "_", immune_cats[i])), ".png", sep = "")
cat_title <- gsub(" rec", " receptor", gsub("imm ", "immune ", gsub("IFN signal", "\"IFN signature\"", cat_title)))
plot_list[[i]] <- plot_de_cat_genes(cat_gene_list, c(2,4,12,24,48,72), cat_title, fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 1, num_samples_logfc_thresh = 1,
cat_plot_path)
}
line_multiplot_path <- "figures/expression_line_plots/immune_cat_multi_mrc_prr.pdf"
pdf(line_multiplot_path, height = 16, width = 12)
multiplot(plotlist = list(plot_list[[10]], plot_list[[13]]), layout = matrix(c(1,2), nrow = 2, byrow = TRUE))
dev.off()
line_multiplot_path <- "figures/expression_line_plots/immune_cat_multi_chemo_cyto.pdf"
pdf(line_multiplot_path, height = 16, width = 12)
multiplot(plotlist = list(plot_list[[3]], plot_list[[5]]), layout = matrix(c(1,2), nrow = 2, byrow = TRUE))
dev.off()
line_multiplot_path <- "figures/expression_line_plots/immune_cat_multi_ifn_integrin.pdf"
pdf(line_multiplot_path, height = 16, width = 12)
multiplot(plotlist = list(plot_list[[8]], plot_list[[9]]), layout = matrix(c(1,2), nrow = 2, byrow = TRUE))
dev.off()
kegg_immune_categories <- c("path:gga04640", "path:gga04610", "path:gga04611", "path:gga04620", "path:gga04624", "path:gga04621",
"path:gga04622", "path:gga04623", "path:gga04625", "path:gga04650", "path:gga04612", "path:gga04660",
"path:gga04658", "path:gga04659", "path:gga04657", "path:gga04662", "path:gga04664", "path:gga04666",
"path:gga04670", "path:gga04672", "path:gga04062")
go_immune_categories <- get_child_nodes("GO:0002376")
i <- 0
immune_genes <- c()
while (i < length(go_immune_categories$child_go_id)) {
i <- i + 1
go_cat_list <- get_de_go_cat_genes(topgenes_chicken_list, go_immune_categories$child_go_id[i], egGO, egSYMBOL)
immune_genes <- c(immune_genes, go_cat_list[[1]]$gene_name)
}
i <- 0
while (i < length(kegg_immune_categories)) {
i <- i + 1
kegg_cat_list <- get_de_kegg_cat_genes(topgenes_chicken_list,"gga", kegg_immune_categories[i], egSYMBOL)
immune_genes <- c(immune_genes, kegg_cat_list[[1]]$gene_name)
}
immune_genes <- c(immune_genes, immune_classified_genes$gene_name)
immune_genes <- unique(immune_genes)
m <- match(immune_genes, rownames(chicken_logfc_df))
m <- m[complete.cases(m)]
chicken_immune_gene_logfc_df <- chicken_logfc_df[m,]
m <- match(immune_genes, rownames(chicken_logfc_df_filt))
m <- m[complete.cases(m)]
chicken_immune_gene_logfc_df_filt <- chicken_logfc_df_filt[m,]
write.csv(chicken_immune_gene_logfc_df_filt, file = "figures/heatmaps/chicken_immune_genes_logfc_filt.csv")
heatmap_path <- "figures/heatmaps/chicken_immune_genes_logfc.png"
png(heatmap_path, width = 1500, height = 2000, pointsize = 100)
aspectHeatmap(as.matrix(chicken_immune_gene_logfc_df), Colv = NA,
xlab = "Timepoints", main = "Chicken immune gene log fold change",
col = colorRampPalette(brewer.pal(9, "RdYlGn"))(500),
hExp = 5.5, wExp = 0.8)
dev.off()
heatmap_path <- "figures/heatmaps/chicken_immune_genes_logfc_filt.png"
png(heatmap_path, width = 1000, height = 1600, pointsize = 20)
aspectHeatmap(as.matrix(chicken_immune_gene_logfc_df_filt), Colv = NA,
xlab = "Timepoints",
col = colorRampPalette(brewer.pal(9, "RdYlBu"))(500),
hExp = 2.3)
dev.off()
heatmap_path <- "figures/heatmaps/chicken_immune_genes_logfc_filt_heatmap2_key.pdf"
pdf(heatmap_path, width = 30, height = 20)
heatmap.2(as.matrix(chicken_immune_gene_logfc_df_filt), Colv = FALSE,
dendrogram = "row",
xlab = "Timepoints",
col = colorRampPalette(brewer.pal(9, "RdBu"))(500),
trace = "none",
#key = FALSE,
density.info = "none",
scale = "row")
dev.off()
# Eimeria GO and KEGG analysis
# Import the file containing GO annotations downloaded from ToxoDB and KEGG annotations found through the KEGG KAAS service
path_to_eimeria_go_file <- "data/eimeria_go_kegg_annotation/GenesByGoTerm_Summary.csv"
path_to_eimeria_kegg_file <- "data/eimeria_go_kegg_annotation/eimeria_kegg_annotation.tsv"
path_to_transcript_to_gene_file <- "data/reference_genomes/eimeria_transcript_to_gene.tsv"
eimeria_go_annotation <- read.delim(path_to_eimeria_go_file, sep = ",", check.names=FALSE, stringsAsFactors=FALSE)
eimeria_kegg_best_cat_list <- read.delim(path_to_eimeria_kegg_file, check.names=FALSE, stringsAsFactors=FALSE, header = FALSE)
eimeria_transcript_to_gene <- read.delim(path_to_transcript_to_gene_file, check.names=FALSE, stringsAsFactors=FALSE, header = FALSE)
# Create a new dataframe with seperate entries for each gene for each GO category it belongs to
eimeria_full_go <- as.data.frame(matrix(0,
ncol = ncol(eimeria_go_annotation),
nrow = nrow(eimeria_go_annotation)))
colnames(eimeria_full_go) <- colnames(eimeria_go_annotation)
i <- 0
j <- 1
len_eimeria_go <- dim(eimeria_go_annotation)[1]
while (i < len_eimeria_go) {
go_cats <- strsplit(eimeria_go_annotation$`Computed GO Process IDs`[i+1], ";")[[1]]
go_cats_description <- strsplit(eimeria_go_annotation$`Computed GO Processes`[i+1], ";")[[1]]
k <- 1
len_go_cats <- length(go_cats)
while (k <= len_go_cats) {
eimeria_full_go[j,] <- eimeria_go_annotation[i+1,]
eimeria_full_go[j,"Computed GO Process IDs"] <- go_cats[k]
eimeria_full_go[j,"Computed GO Processes"] <- go_cats_description[k]
k <- k + 1
j <- j + 1
}
i <- i + 1
}
eimeria_go_analysis <- function(topgenes_eimeria, eimeria_full_go, eimeria_go_cats, fdr_thresh, logfc_thresh, ont) {
# Function for computing gene membership in GO categories
FDR_significant_genes <- topgenes_eimeria$table[topgenes_eimeria$table$FDR < fdr_thresh,]
num_significant_genes <- c(dim(FDR_significant_genes[FDR_significant_genes$logFC > logfc_thresh,])[1],
dim(FDR_significant_genes[FDR_significant_genes$logFC < -logfc_thresh,])[1])
eimeria_go_results <- as.data.frame(matrix(0, ncol = 8, nrow = length(eimeria_go_cats)))
colnames(eimeria_go_results) <- c("GO_ID", "Term", "Ont", "N", "Up", "Down", "P.Up", "P.Down")
i <- 1
neg_logfc_thresh <- -logfc_thresh
for (eimeria_go_cat in eimeria_go_cats) {
genes_in_go <- eimeria_full_go[eimeria_full_go$`Computed GO Process IDs` == eimeria_go_cat,]
eimeria_go_cat_term <- genes_in_go[1,"Computed GO Processes"]
N <- dim(genes_in_go)[1]
m <- match(genes_in_go$`Gene ID`, topgenes_eimeria$table$locus_tag)
if (!is.na(m[1])) {
m <- m[complete.cases(m)]
topgenes_eimeria_go_cat <- topgenes_eimeria$table[m,]
topgenes_eimeria_go_cat <- topgenes_eimeria_go_cat[topgenes_eimeria_go_cat$FDR < fdr_thresh,]
if (dim(topgenes_eimeria_go_cat)[1] != 0) {
num_up_genes <- nrow(topgenes_eimeria_go_cat[topgenes_eimeria_go_cat$logFC >= logfc_thresh,])
num_down_genes <- nrow(topgenes_eimeria_go_cat[topgenes_eimeria_go_cat$logFC <= neg_logfc_thresh,])
} else {
num_up_genes <- 0
num_down_genes <- 0
}
} else {
num_up_genes <- 0
num_down_genes <- 0
}
x <- c(num_up_genes, num_down_genes)
n <- dim(topgenes_eimeria)[1] - N
k <- num_significant_genes
fisher_up <- fisher.test(matrix(c(x[1],k[1]-x[1],N-x[1],n-(k[1]-x[1])),nrow=2,ncol=2),alternative="greater")
fisher_down <- fisher.test(matrix(c(x[2],k[2]-x[2],N-x[2],n-(k[2]-x[2])),nrow=2,ncol=2),alternative="greater")
go_cat_results <- data.frame(eimeria_go_cat, eimeria_go_cat_term, ont, N, num_up_genes, num_down_genes,
fisher_up$p.value, fisher_down$p.value, stringsAsFactors = FALSE)
eimeria_go_results[i,] <- go_cat_results[1,]
i <- i + 1
}
rownames(eimeria_go_results) <- eimeria_go_results$GO_ID
eimeria_go_results <- eimeria_go_results[,-1]
return(eimeria_go_results)
}
# Get the number of genes that are up or down regulated in each GO category
eimeria_go_cats <- unique(eimeria_full_go$`Computed GO Process IDs`)
allgo_eimeria_list <- lapply(topgenes_eimeria_list,
function(x) eimeria_go_analysis(x, eimeria_full_go, eimeria_go_cats, fdr_threshold, fdr_threshold, "BP"))
# Preprocessing of KEGG data for the KEGG enrichment analaysis
genes_in_analysis <- topgenes_eimeria_list[[1]]$table$entrez_gene_id
m <- match(genes_in_analysis, eimeria_transcript_to_gene[,1])
transcripts_in_analysis <- eimeria_transcript_to_gene[m,]
m <- match(transcripts_in_analysis[,2], eimeria_kegg_best_cat_list[,1])
kegg_ids_in_analysis <- eimeria_kegg_best_cat_list[m,2]
eimeria_kegg_genes <- data.frame(transcripts_in_analysis, kegg_ids_in_analysis)
eimeria_kegg_genes <- eimeria_kegg_genes[eimeria_kegg_genes[,3] != "",]
eimeria_kegg_id_universe <- eimeria_kegg_best_cat_list[eimeria_kegg_best_cat_list[,2] != "",2]
gene_to_pathway <- keggLink("pathway", "ko")
pathway_to_term <- keggList("pathway")
m <- match(eimeria_kegg_genes[,3], substr(names(gene_to_pathway), 4, nchar(gene_to_pathway[1])))
eimeria_kegg_genes <- eimeria_kegg_genes[!is.na(m),]
gene_pathways <- gene_to_pathway[m[complete.cases(m)]]
m <- match(gene_pathways, names(pathway_to_term))
pathway_terms <- pathway_to_term[m]
eimeria_kegg_annotation <- data.frame(genes = eimeria_kegg_genes[,1], kegg_pathway = gene_pathways,
kegg_term = pathway_terms, stringsAsFactors = FALSE)
m <- match(eimeria_kegg_id_universe, substr(names(gene_to_pathway), 4, nchar(gene_to_pathway[1])))
gene_universe_pathways <- gene_to_pathway[m[complete.cases(m)]]
eimeria_kegg_cats <- unique(gene_universe_pathways)
eimeria_kegg_analysis <- function(topgenes_eimeria, eimeria_kegg_annotation, eimeria_kegg_cats,
eimeria_universe, fdr_thresh, logfc_thresh) {
# Function for computing gene membership in KEGG categories
# Uses KEGGREST to access data from the KEGG database
FDR_significant_genes <- topgenes_eimeria$table[topgenes_eimeria$table$FDR < fdr_thresh,]
num_significant_genes <- c(dim(FDR_significant_genes[FDR_significant_genes$logFC > logfc_thresh,])[1],
dim(FDR_significant_genes[FDR_significant_genes$logFC < -logfc_thresh,])[1])
eimeria_kegg_results <- as.data.frame(matrix(0, ncol = 7, nrow = length(eimeria_kegg_cats)))
colnames(eimeria_kegg_results) <- c("KEGG_ID", "Term", "N", "Up", "Down", "P.Up", "P.Down")
i <- 1
neg_logfc_thresh <- -logfc_thresh
for (eimeria_kegg_cat in eimeria_kegg_cats) {
genes_in_kegg <- eimeria_kegg_annotation[eimeria_kegg_annotation$kegg_pathway == eimeria_kegg_cat,]
eimeria_kegg_cat_term <- genes_in_kegg[1,"kegg_term"]
N <- length(eimeria_universe[eimeria_universe == eimeria_kegg_cat])
m <- match(genes_in_kegg$genes, topgenes_eimeria$table$entrez_gene_id)
if (!is.na(m[1])) {
m <- m[complete.cases(m)]
topgenes_eimeria_kegg_cat <- topgenes_eimeria$table[m,]
topgenes_eimeria_kegg_cat <- topgenes_eimeria_kegg_cat[topgenes_eimeria_kegg_cat$FDR < fdr_thresh,]
if (dim(topgenes_eimeria_kegg_cat)[1] != 0) {
num_up_genes <- nrow(topgenes_eimeria_kegg_cat[topgenes_eimeria_kegg_cat$logFC >= logfc_thresh,])
num_down_genes <- nrow(topgenes_eimeria_kegg_cat[topgenes_eimeria_kegg_cat$logFC <= neg_logfc_thresh,])
} else {
num_up_genes <- 0
num_down_genes <- 0
}
} else {
num_up_genes <- 0
num_down_genes <- 0
}
x <- c(num_up_genes, num_down_genes)
n <- dim(topgenes_eimeria)[1] - N
k <- num_significant_genes
fisher_up <- fisher.test(matrix(c(x[1],k[1]-x[1],N-x[1],n-(k[1]-x[1])),nrow=2,ncol=2),alternative="greater")
fisher_down <- fisher.test(matrix(c(x[2],k[2]-x[2],N-x[2],n-(k[2]-x[2])),nrow=2,ncol=2),alternative="greater")
kegg_cat_results <- data.frame(eimeria_kegg_cat, eimeria_kegg_cat_term, N, num_up_genes, num_down_genes,
fisher_up$p.value, fisher_down$p.value, stringsAsFactors = FALSE)
eimeria_kegg_results[i,] <- kegg_cat_results[1,]
i <- i + 1
}
rownames(eimeria_kegg_results) <- eimeria_kegg_results$KEGG_ID
eimeria_kegg_results <- eimeria_kegg_results[,-1]
return(eimeria_kegg_results)
}
allkegg_eimeria_list <- lapply(topgenes_eimeria_list,
function(x) eimeria_kegg_analysis(x, eimeria_kegg_annotation, eimeria_kegg_cats,
gene_universe_pathways, fdr_threshold, 1))
# Export the top 50 most significantly enriched GO categories and KEGG pathways
i <- 0
while (i < length(allgo_eimeria_list)) {
i <- i + 1
go_path <- paste("results/de_analysis/top_go_kegg_tables/top_go_eimeria_", timepoints[i], ".csv", sep = "")
kegg_path <- paste("results/de_analysis/top_go_kegg_tables/top_kegg_eimeria_", timepoints[i], ".csv", sep = "")
min_pval_go <- pmin(allgo_eimeria_list[[i]]$P.Up, allgo_eimeria_list[[i]]$P.Down)
min_pval_kegg <- pmin(allkegg_eimeria_list[[i]]$P.Up, allkegg_eimeria_list[[i]]$P.Down)
allgo_eimeria_list[[i]] <- allgo_eimeria_list[[i]][order(min_pval_go),]
allkegg_eimeria_list[[i]] <- allkegg_eimeria_list[[i]][order(min_pval_kegg),]
write.csv(allgo_eimeria_list[[i]][1:50,], go_path)
write.csv(allkegg_eimeria_list[[i]][1:50,], kegg_path)
}
# Immune related E. tenella genes are plotted here
immune_related_eimeria_gene <- "ETH_00030475"
cat_gene_ids <- immune_related_eimeria_gene
cat_gene_list <- lapply(topgenes_eimeria_list, function(x) x$table[match(cat_gene_ids, x$table$locus_tag),])
cat_gene_list <- lapply(cat_gene_list, function(x) {colnames(x) <- c("entrez_gene_id", "gene_name", "logFC", "logCPM", "F", "PValue", "FDR")
return(x)})
cat_title <- "Eimeria immune activating genes"
cat_plot_path <- "figures/expression_line_plots/eimeria_immune_activating_genes.png"
plot_de_cat_genes(cat_gene_list, c(2,4,12,24,48,72), cat_title, fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 1, num_samples_logfc_thresh = 1,
cat_plot_path)
# Look at what limited GO and KEGG category information is available on E. tenella
apoptosis_affecting_go <- get_child_nodes("GO:0052040")
apoptosis_affecting_go_eimeria <- allgo_eimeria_list[[1]][match(apoptosis_affecting_go$child_go_id, rownames(allgo_eimeria_list[[1]])),]
kegg_immune_categories_eimeria <- c("path:map04640", "path:map04610", "path:map04611", "path:map04620", "path:map04624",
"path:map04621", "path:map04622", "path:map04623", "path:map04625", "path:map04650",
"path:map04612", "path:map04660", "path:map04658", "path:map04659", "path:map04657",
"path:map04662", "path:map04664", "path:map04666", "path:map04670", "path:map04672",
"path:map04062")
m <- match(kegg_immune_categories_eimeria, rownames(allkegg_eimeria_list[[1]]))
m <- m[complete.cases(m)]
immune_related_kegg_eimeria_list <- lapply(allkegg_eimeria_list, function(x) x[m,])
# Make a line plot of the percentage of Eimeria reads at different time points
eimeria_perc_df <- data.frame(eimeria_perc_avg = c(0.5169, 1.2126, 0.586, 1.744566667, 5.391266667, 2.809),
timepoints = c(2, 4, 12, 24, 48, 72),
eimeria_perc_1 = c(0.4993, 1.8494, 0.573, 2.3565, 5.5871, 2.4569),
eimeria_perc_2 = c(0.466, 0.6958, 0.5766, 1.5509, 5.936, 3.1254),
eimeria_perc_3 = c(0.5854, 1.0926, 0.6084, 1.3263, 4.6507, 2.8447))
png("figures/eimeria_sample_fraction.png", width = 1200, height = 800)
p <- ggplot(eimeria_perc_df, aes(x = timepoints, y = eimeria_perc_avg)) +
geom_line(size = 1.5, alpha = 0.5) +
geom_point(aes(x = timepoints, y = eimeria_perc_1), size = 5) +
geom_point(aes(x = timepoints, y = eimeria_perc_2), size = 5) +
geom_point(aes(x = timepoints, y = eimeria_perc_3), size = 5) +
coord_cartesian(xlim = c(0, 80), ylim = c(0.2, 5.8)) +
scale_x_discrete(limits=eimeria_perc_df$timepoints) +
theme_bw() +
theme(plot.title = element_text(hjust = 0.5, size = 40),
axis.text = element_text(size = 30),
axis.title = element_text(size = 30)) +
xlab("Time post-infection [h]") + ylab(expression(paste(italic("E. tenella"), " fraction [%]")))
print(p)
dev.off()
# Analyze Eimeria SAG genes
plot_list = list()
eimeria_product_df <- read.delim("data/reference_genomes/eimeria_gene_products.csv",
col.names = c("gene_name", "entrez_gene_id", "product"), stringsAsFactors = FALSE)
eimeria_SAG_genes <- eimeria_product_df[grep("sag", eimeria_product_df$product),]
eimeria_SAG_genes <- eimeria_SAG_genes[eimeria_SAG_genes$entrez_gene_id %in% topgenes_eimeria_list[[1]]$table$entrez_gene_id,]
i <- 0
while (i < dim(eimeria_SAG_genes)[1]) {
i <- i + 1
if (substr(eimeria_SAG_genes$product[i], 24, 24) == ")") {
eimeria_SAG_genes$product[i] <- substr(eimeria_SAG_genes$product[i], 20, 23)
} else {
eimeria_SAG_genes$product[i] <- substr(eimeria_SAG_genes$product[i], 20, 24)
}
}
eimeria_SAG_gene_ids <- eimeria_SAG_genes$entrez_gene_id
SAG_gene_list <- lapply(topgenes_eimeria_list, function(x) x$table[match(eimeria_SAG_gene_ids, x$table$entrez_gene_id),])
SAG_gene_list <- lapply(SAG_gene_list, function(x) {colnames(x) <- c("entrez_gene_id", "gene_name", "logFC", "logCPM", "F", "PValue", "FDR")
return(x)})
SAG_gene_list <- lapply(SAG_gene_list, function(x) {x$gene_name <- eimeria_SAG_genes$product
return(x)})
SAG_title <- expression(paste(italic("E. tenella"), " SAG gene expression"))
SAG_plot_path <- "figures/expression_line_plots/SAG_genes.png"
p <- plot_de_cat_genes(SAG_gene_list, c(2,4,12,24,48,72), SAG_title, fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 1, num_samples_logfc_thresh = 1,
SAG_plot_path, plot_scale = c(-12.5,12.5))
SAG_plot_path <- "figures/expression_line_plots/SAG_genes.pdf"
pdf(SAG_plot_path, height = 8, width = 12)
p
dev.off()
plot_list[[1]] <- p
# Analyze E. tenella ROPK genes
eimeria_ROPK_ids <- read.delim("ropk_genes_eimeria.csv", sep = ",", stringsAsFactors = FALSE)
eimeria_full_ROPK <- as.data.frame(matrix(0,
ncol = ncol(eimeria_ROPK_ids),
nrow = nrow(eimeria_ROPK_ids)))
colnames(eimeria_full_ROPK) <- c("gene_name", "gene_id")
i <- 0
j <- 1
len_eimeria_ROPK <- dim(eimeria_ROPK_ids)[1]
while (i < len_eimeria_ROPK) {
ROPK_gene_ids <- strsplit(eimeria_ROPK_ids$Eimeria_tenella[i+1], " ")[[1]]
k <- 1
len_ROPK_gene_ids <- length(ROPK_gene_ids)
while (k <= len_ROPK_gene_ids) {
ROPK_gene_name <- paste(eimeria_ROPK_ids$Subfamily[i+1], "_", k, sep = "")
eimeria_full_ROPK[j,1] <- ROPK_gene_name
eimeria_full_ROPK[j,2] <- ROPK_gene_ids[k]
k <- k + 1
j <- j + 1
}
i <- i + 1
}
eimeria_ROPK_genes <- eimeria_product_df[eimeria_product_df$gene_name %in% eimeria_full_ROPK$gene_id,]
m <- match(eimeria_ROPK_genes$gene_name, eimeria_full_ROPK$gene_id)
eimeria_ROPK_genes$product <- eimeria_full_ROPK$gene_name[m]
eimeria_ROPK_genes <- eimeria_ROPK_genes[eimeria_ROPK_genes$entrez_gene_id %in% topgenes_eimeria_list[[1]]$table$entrez_gene_id,]
eimeria_ROPK_gene_ids <- eimeria_ROPK_genes$entrez_gene_id
ROPK_gene_list <- lapply(topgenes_eimeria_list, function(x) x$table[match(eimeria_ROPK_gene_ids, x$table$entrez_gene_id),])
ROPK_gene_list <- lapply(ROPK_gene_list, function(x) {colnames(x) <- c("entrez_gene_id", "gene_name", "logFC", "logCPM", "F", "PValue", "FDR")
return(x)})
ROPK_gene_list <- lapply(ROPK_gene_list, function(x) {x$gene_name <- eimeria_ROPK_genes$product
return(x)})
ROPK_title <- expression(paste(italic("E. tenella"), " ROPK gene expression"))
ROPK_plot_path <- "figures/expression_line_plots/ROPK_genes.png"
p <- plot_de_cat_genes(ROPK_gene_list, c(2,4,12,24,48,72), ROPK_title, fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 1, num_samples_logfc_thresh = 1,
ROPK_plot_path, plot_scale = c(-12.5,15))
ROPK_plot_path <- "figures/expression_line_plots/ROPK_genes.pdf"
pdf(ROPK_plot_path, height = 8, width = 12)
p
dev.off()
plot_list[[2]] <- p
line_multiplot_path <- "figures/expression_line_plots/SAG_ROPK_multiplot.pdf"
pdf(line_multiplot_path, height = 16, width = 12)
multiplot(plotlist = plot_list, layout = matrix(c(1,2), nrow = 2, byrow = TRUE))
dev.off()
# Analyze E. tenella GRA genes
plot_list = list()
eimeria_GRA_ids <- read.delim("E_tenella_GRA_genes.csv", sep = ",", stringsAsFactors = FALSE)
eimeria_GRA_genes <- eimeria_product_df[eimeria_product_df$gene_name %in% eimeria_GRA_ids$gene_id,]
m <- match(eimeria_GRA_genes$gene_name, eimeria_GRA_ids$gene_id)
eimeria_GRA_genes$product <- eimeria_GRA_ids$gene_symbol[m]
eimeria_GRA_genes <- eimeria_GRA_genes[eimeria_GRA_genes$entrez_gene_id %in% topgenes_eimeria_list[[1]]$table$entrez_gene_id,]
eimeria_GRA_gene_ids <- eimeria_GRA_genes$entrez_gene_id
GRA_gene_list <- lapply(topgenes_eimeria_list, function(x) x$table[match(eimeria_GRA_gene_ids, x$table$entrez_gene_id),])
GRA_gene_list <- lapply(GRA_gene_list, function(x) {colnames(x) <- c("entrez_gene_id", "gene_name", "logFC", "logCPM", "F", "PValue", "FDR")
return(x)})
GRA_gene_list <- lapply(GRA_gene_list, function(x) {x$gene_name <- eimeria_GRA_genes$product
return(x)})
GRA_title <- expression(paste(italic("E. tenella"), " GRA gene expression"))
GRA_plot_path <- "figures/expression_line_plots/GRA_genes.png"
p <- plot_de_cat_genes(GRA_gene_list, c(2,4,12,24,48,72), GRA_title, fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 1, num_samples_logfc_thresh = 1,
GRA_plot_path, plot_scale = c(-12.5,12.5))
GRA_plot_path <- "figures/expression_line_plots/GRA_genes.pdf"
pdf(GRA_plot_path, height = 8, width = 12)
p
dev.off()
plot_list[[1]] <- p
# Analyze E. tenella MIC genes
eimeria_MIC_ids <- read.delim("E_tenella_MIC_genes.csv", sep = ",", stringsAsFactors = FALSE)
eimeria_MIC_genes <- eimeria_product_df[eimeria_product_df$gene_name %in% eimeria_MIC_ids$gene_id,]
m <- match(eimeria_MIC_genes$gene_name, eimeria_MIC_ids$gene_id)
eimeria_MIC_genes$product <- eimeria_MIC_ids$gene_symbol[m]
eimeria_MIC_genes <- eimeria_MIC_genes[eimeria_MIC_genes$entrez_gene_id %in% topgenes_eimeria_list[[1]]$table$entrez_gene_id,]
eimeria_MIC_gene_ids <- eimeria_MIC_genes$entrez_gene_id
MIC_gene_list <- lapply(topgenes_eimeria_list, function(x) x$table[match(eimeria_MIC_gene_ids, x$table$entrez_gene_id),])
MIC_gene_list <- lapply(MIC_gene_list, function(x) {colnames(x) <- c("entrez_gene_id", "gene_name", "logFC", "logCPM", "F", "PValue", "FDR")
return(x)})
MIC_gene_list <- lapply(MIC_gene_list, function(x) {x$gene_name <- eimeria_MIC_genes$product
return(x)})
MIC_title <- expression(paste(italic("E. tenella"), " MIC gene expression"))
MIC_plot_path <- "figures/expression_line_plots/MIC_genes.png"
p <- plot_de_cat_genes(MIC_gene_list, c(2,4,12,24,48,72), MIC_title, fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 1, num_samples_logfc_thresh = 1,
MIC_plot_path, plot_scale = c(-12.5,12.5))
MIC_plot_path <- "figures/expression_line_plots/MIC_genes.pdf"
pdf(MIC_plot_path, height = 8, width = 12)
p
dev.off()
plot_list[[2]] <- p
line_multiplot_path <- "figures/expression_line_plots/GRA_MIC_multiplot.pdf"
pdf(line_multiplot_path, height = 16, width = 12)
multiplot(plotlist = plot_list, layout = matrix(c(1,2), nrow = 2, byrow = TRUE))
dev.off()
# Eimeria spliceosome genes
m <- match(eimeria_kegg_annotation[eimeria_kegg_annotation[,3] == "Spliceosome",1], topgenes_eimeria_list[[1]]$table[,1])
eimeria_splice_ids <- topgenes_eimeria_list[[1]]$table[m,2]
eimeria_splice_counts <- eimeria_cpm[eimeria_splice_ids,]
m <- match(eimeria_full_go[eimeria_full_go[,5] == "dephosphorylation",1], topgenes_eimeria_list[[1]]$table[,2])
eimeria_dephos_ids <- topgenes_eimeria_list[[1]]$table[m,2]
eimeria_dephos_counts <- eimeria_cpm[eimeria_dephos_ids,]
m <- match(eimeria_full_go[eimeria_full_go[,5] == "mRNA splicing, via spliceosome",1], topgenes_eimeria_list[[1]]$table[,2])
eimeria_mrna_splice_ids <- topgenes_eimeria_list[[1]]$table[m,2]
eimeria_mrna_splice_counts <- eimeria_cpm[eimeria_mrna_splice_ids,]
# Chicken lysosome and phagosome genes
lysosome_gene_list <- get_de_kegg_cat_genes(topgenes_chicken_list,"gga", "path:gga04142", egSYMBOL)
lysosome_filt_gene_df <- lysosome_gene_list[[4]][lysosome_gene_list[[4]]$entrez_gene_id %in% logfc_filt_de_genes_chicken$entrez_gene_id,]
write.csv(lysosome_filt_gene_df, file = "lysosome_significant_genes.csv")
phagosome_gene_list <- get_de_kegg_cat_genes(topgenes_chicken_list,"gga", "path:gga04145", egSYMBOL)
phagosome_filt_gene_df <- phagosome_gene_list[[4]][phagosome_gene_list[[4]]$entrez_gene_id %in% logfc_filt_de_genes_chicken$entrez_gene_id,]
write.csv(phagosome_filt_gene_df, file = "phagosome_significant_genes.csv")
