k <- k + 1
}
i <- i + 1
}
below_fdr_threshold <- de_cat_gene_df$FDR < fdr_thresh
de_cat_gene_df$below_fdr_threshold <- below_fdr_threshold
curr_num_genes <- dim(de_cat_genes[[1]])[1]
neg_logfc_thresh <- -logfc_thresh
i <- 0
while (i < curr_num_genes) {
gene_start <- num_conditions*i + 1
gene_end <- num_conditions*(i + 1)
gene_below_thresh <- FALSE
j <- num_conditions*i + 1
num_samples_below_fdr_thresh = 0
num_samples_above_logfc_thresh = 0
while (j <= num_conditions*(i+1)) {
if (de_cat_gene_df$below_fdr_threshold[j]) {
num_samples_below_fdr_thresh <- num_samples_below_fdr_thresh + 1
}
if (de_cat_gene_df$logFC[j] >= logfc_thresh || de_cat_gene_df$logFC[j] <= neg_logfc_thresh) {
num_samples_above_logfc_thresh <- num_samples_above_logfc_thresh + 1
}
j <- j + 1
}
if (num_samples_below_fdr_thresh >= num_samples_fdr_thresh && num_samples_above_logfc_thresh >= num_samples_logfc_thresh) {
i <- i + 1
}
else {
gene_start <- num_conditions*i + 1
gene_end <- num_conditions*(i + 1)
de_cat_gene_df <- de_cat_gene_df[-c(gene_start:gene_end),]
}
curr_num_genes <- dim(de_cat_gene_df)[1]/num_conditions
}
if (curr_num_genes > 30) {
# To increase readability, the plot is split into two if there are too many genes being plotted
split_vec_1 <- rep(1, curr_num_genes/2)
split_vec_2 <- rep(2, curr_num_genes/2)
split_vec <- c(split_vec_1, split_vec_1, split_vec_1, split_vec_1, split_vec_1, split_vec_1,
split_vec_2, split_vec_2, split_vec_2, split_vec_2, split_vec_2, split_vec_2)
if (curr_num_genes*6 > length(split_vec)) {
split_vec <- c(split_vec, rep(2, num_conditions))
}
de_cat_gene_df_list <- split(de_cat_gene_df, split_vec)
de_cat_gene_df <- de_cat_gene_df_list[[1]]
curr_num_genes <- dim(de_cat_gene_df)[1]/num_conditions
de_cat_gene_df$gene_timepoints <- rep(experimental_conditions, curr_num_genes)
p <- ggplot(de_cat_gene_df, aes(x=gene_timepoints, y=logFC, group=gene_name)) +
geom_line(aes(color = gene_name)) +
scale_color_manual(values = as.vector(glasbey(curr_num_genes))) +
geom_point(aes(shape=below_fdr_threshold, color = gene_name), size = 3) +
scale_shape_manual(values = c(1,17)) +
scale_x_discrete(limits=experimental_conditions) +
ggtitle(plot_title) +
theme(plot.title = element_text(hjust = 0.5, size = 18)) +
coord_cartesian(ylim = c(-5, 7.5), xlim = c(0, 80)) +
labs(shape = "Below FDR threshold", color = "Gene symbol") +
xlab("Sample time points") + ylab("log2(Fold change)") +
geom_hline(yintercept = 0)
print(p)
de_cat_gene_df <- de_cat_gene_df_list[[2]]
curr_num_genes <- dim(de_cat_gene_df)[1]/num_conditions
}
de_cat_gene_df$gene_timepoints <- rep(experimental_conditions, curr_num_genes)
p <- ggplot(de_cat_gene_df, aes(x=gene_timepoints, y=logFC, group=gene_name)) +
geom_line(aes(color = gene_name)) +
scale_color_manual(values = as.vector(glasbey(curr_num_genes))) +
geom_point(aes(shape=below_fdr_threshold, color = gene_name), size = 3) +
scale_shape_manual(values = c(1,17)) +
scale_x_discrete(limits=experimental_conditions) +
ggtitle(plot_title) +
theme(plot.title = element_text(hjust = 0.5, size = 18)) +
coord_cartesian(ylim = c(-5, 7.5), xlim = c(0, 80)) +
labs(shape = "Below FDR threshold", color = "Gene symbol") +
xlab("Sample time points") + ylab("log2(Fold change)") +
geom_hline(yintercept = 0)
print(p)
}
# Plot a lineplot showing log fold change in each sample for the genes in the toll like KEGG pathway
plot_de_cat_genes(toll_like_gene_list, c(2,4,12,24,48,72), "Toll-like receptor signaling pathway gene expression", fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 1, num_samples_logfc_thresh = 1)
tlr15_list <- lapply(topgenes_chicken_list, function(x) x$table["TLR15",])
tlr21_list <- lapply(topgenes_chicken_list, function(x) x$table["TLR21",])
plot_de_cat_genes(tlr15_list, c(2,4,12,24,48,72), "TLR15 expression", fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 0, num_samples_logfc_thresh = 0)
plot_de_cat_genes(tlr21_list, c(2,4,12,24,48,72), "TLR21 expression", fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 0, num_samples_logfc_thresh = 0)
path_to_immuno_gene_list <- "immune_classified_genes.csv"
immune_classified_genes <- read.delim(path_to_immuno_gene_list, check.names=FALSE, stringsAsFactors=FALSE)
immune_cats <- unique(immune_classified_genes$Category)
i <- 0
while (i < length(immune_cats)) {
i <- i + 1
cat_gene_ids <- immune_classified_genes[immune_cats[i] == immune_classified_genes$Category,]$entrez_gene_id
cat_gene_list <- lapply(topgenes_chicken_list, function(x) x$table[match(cat_gene_ids, x$table$entrez_gene_id),])
cat_title <- paste("Immune category", immune_cats[i], "gene expression")
cat_plot_path <- paste("figures/expression_line_plots/immune_cat_", gsub(" ", "_", gsub("/", "_", immune_cats[i])), ".pdf", sep = "")
pdf(cat_plot_path, width = 19.2, height = 10.8)
plot_de_cat_genes(cat_gene_list, c(2,4,12,24,48,72), cat_title, fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 1, num_samples_logfc_thresh = 1)
dev.off()
}
plot_de_cat_genes <- function(de_cat_genes, experimental_conditions, plot_title, fdr_thresh = 0.05,
logfc_thresh = 1, num_samples_fdr_thresh = 1, num_samples_logfc_thresh = 1) {
# Produces a line plot of log2 fold change across a set of samples for genes in a specific
# GO or KEGG category
i <- 1
j <- 1
de_cat_gene_df <- as.data.frame(matrix(0,
ncol = dim(de_cat_genes[[1]])[2],
nrow = dim(de_cat_genes[[1]])[1]*length(de_cat_genes)))
colnames(de_cat_gene_df) <- colnames(de_cat_genes[[1]])
num_conditions <- length(de_cat_genes)
num_genes <- dim(de_cat_genes[[1]])[1]
while (i <= num_genes) {
k <- 1
while (k <= num_conditions) {
de_cat_gene_df[j,] <- de_cat_genes[[k]][i,]
j <- j + 1
k <- k + 1
}
i <- i + 1
}
below_fdr_threshold <- de_cat_gene_df$FDR < fdr_thresh
de_cat_gene_df$below_fdr_threshold <- below_fdr_threshold
curr_num_genes <- dim(de_cat_genes[[1]])[1]
neg_logfc_thresh <- -logfc_thresh
i <- 0
while (i < curr_num_genes) {
gene_start <- num_conditions*i + 1
gene_end <- num_conditions*(i + 1)
gene_below_thresh <- FALSE
j <- num_conditions*i + 1
num_samples_below_fdr_thresh = 0
num_samples_above_logfc_thresh = 0
while (j <= num_conditions*(i+1)) {
if (de_cat_gene_df$below_fdr_threshold[j]) {
num_samples_below_fdr_thresh <- num_samples_below_fdr_thresh + 1
}
if (de_cat_gene_df$logFC[j] >= logfc_thresh || de_cat_gene_df$logFC[j] <= neg_logfc_thresh) {
num_samples_above_logfc_thresh <- num_samples_above_logfc_thresh + 1
}
j <- j + 1
}
if (num_samples_below_fdr_thresh >= num_samples_fdr_thresh && num_samples_above_logfc_thresh >= num_samples_logfc_thresh) {
i <- i + 1
}
else {
gene_start <- num_conditions*i + 1
gene_end <- num_conditions*(i + 1)
de_cat_gene_df <- de_cat_gene_df[-c(gene_start:gene_end),]
}
curr_num_genes <- dim(de_cat_gene_df)[1]/num_conditions
}
if (curr_num_genes > 30) {
# To increase readability, the plot is split into two if there are too many genes being plotted
split_vec_1 <- rep(1, curr_num_genes/2)
split_vec_2 <- rep(2, curr_num_genes/2)
split_vec <- c(split_vec_1, split_vec_1, split_vec_1, split_vec_1, split_vec_1, split_vec_1,
split_vec_2, split_vec_2, split_vec_2, split_vec_2, split_vec_2, split_vec_2)
if (curr_num_genes*6 > length(split_vec)) {
split_vec <- c(split_vec, rep(2, num_conditions))
}
de_cat_gene_df_list <- split(de_cat_gene_df, split_vec)
de_cat_gene_df <- de_cat_gene_df_list[[1]]
curr_num_genes <- dim(de_cat_gene_df)[1]/num_conditions
de_cat_gene_df$gene_timepoints <- rep(experimental_conditions, curr_num_genes)
p <- ggplot(de_cat_gene_df, aes(x=gene_timepoints, y=logFC, group=gene_name)) +
geom_line(aes(color = gene_name)) +
scale_color_manual(values = as.vector(polychrome(curr_num_genes))) +
geom_point(aes(shape=below_fdr_threshold, color = gene_name), size = 3) +
scale_shape_manual(values = c(1,17)) +
scale_x_discrete(limits=experimental_conditions) +
theme_bw() +
ggtitle(plot_title) +
theme(plot.title = element_text(hjust = 0.5, size = 18)) +
coord_cartesian(ylim = c(-5, 7.5), xlim = c(0, 80)) +
labs(shape = "Below FDR threshold", color = "Gene symbol") +
xlab("Sample time points") + ylab("log2(Fold change)") +
geom_hline(yintercept = 0)
print(p)
de_cat_gene_df <- de_cat_gene_df_list[[2]]
curr_num_genes <- dim(de_cat_gene_df)[1]/num_conditions
}
de_cat_gene_df$gene_timepoints <- rep(experimental_conditions, curr_num_genes)
p <- ggplot(de_cat_gene_df, aes(x=gene_timepoints, y=logFC, group=gene_name)) +
geom_line(aes(color = gene_name)) +
scale_color_manual(values = as.vector(polychrome(curr_num_genes))) +
geom_point(aes(shape=below_fdr_threshold, color = gene_name), size = 3) +
scale_shape_manual(values = c(1,17)) +
scale_x_discrete(limits=experimental_conditions) +
theme_bw() +
ggtitle(plot_title) +
theme(plot.title = element_text(hjust = 0.5, size = 18)) +
coord_cartesian(ylim = c(-5, 7.5), xlim = c(0, 80)) +
labs(shape = "Below FDR threshold", color = "Gene symbol") +
xlab("Sample time points") + ylab("log2(Fold change)") +
geom_hline(yintercept = 0)
print(p)
}
# Plot a lineplot showing log fold change in each sample for the genes in the toll like KEGG pathway
plot_de_cat_genes(toll_like_gene_list, c(2,4,12,24,48,72), "Toll-like receptor signaling pathway gene expression", fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 1, num_samples_logfc_thresh = 1)
tlr15_list <- lapply(topgenes_chicken_list, function(x) x$table["TLR15",])
tlr21_list <- lapply(topgenes_chicken_list, function(x) x$table["TLR21",])
plot_de_cat_genes(tlr15_list, c(2,4,12,24,48,72), "TLR15 expression", fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 0, num_samples_logfc_thresh = 0)
plot_de_cat_genes(tlr21_list, c(2,4,12,24,48,72), "TLR21 expression", fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 0, num_samples_logfc_thresh = 0)
path_to_immuno_gene_list <- "immune_classified_genes.csv"
immune_classified_genes <- read.delim(path_to_immuno_gene_list, check.names=FALSE, stringsAsFactors=FALSE)
immune_cats <- unique(immune_classified_genes$Category)
i <- 0
while (i < length(immune_cats)) {
i <- i + 1
cat_gene_ids <- immune_classified_genes[immune_cats[i] == immune_classified_genes$Category,]$entrez_gene_id
cat_gene_list <- lapply(topgenes_chicken_list, function(x) x$table[match(cat_gene_ids, x$table$entrez_gene_id),])
cat_title <- paste("Immune category", immune_cats[i], "gene expression")
cat_plot_path <- paste("figures/expression_line_plots/immune_cat_", gsub(" ", "_", gsub("/", "_", immune_cats[i])), ".pdf", sep = "")
pdf(cat_plot_path, width = 19.2, height = 10.8)
plot_de_cat_genes(cat_gene_list, c(2,4,12,24,48,72), cat_title, fdr_thresh = fdr_threshold,
logfc_thresh = logfc_threshold, num_samples_fdr_thresh = 1, num_samples_logfc_thresh = 1)
dev.off()
}
heatmap_path <- "figures/heatmaps/KEGG_cat_upregulated.pdf"
pdf(heatmap_path, width = 130, height = 120, pointsize = 120)
aspectHeatmap(as.matrix(kegg_chicken_pval_list_filtered[[1]]), Colv = NA,
xlab = "Timepoints", main = "Upregulated KEGG categories", wExp = 0.7)
dev.off()
heatmap_path <- "figures/heatmaps/KEGG_cat_downregulated.pdf"
pdf(heatmap_path, width = 100, height = 120, pointsize = 80)
aspectHeatmap(as.matrix(kegg_chicken_pval_list_filtered[[2]]), Colv = NA,
xlab = "Timepoints", main = "Downregulated KEGG categories", hExp = 2)
dev.off()
heatmap_path <- "figures/heatmaps/KEGG_cat_downregulated.pdf"
pdf(heatmap_path, width = 100, height = 100, pointsize = 100)
aspectHeatmap(as.matrix(kegg_chicken_pval_list_filtered[[2]]), Colv = NA,
xlab = "Timepoints", main = "Downregulated KEGG categories", hExp = 2)
dev.off()
View(topgenes_chicken_list)
topgenes_chicken_list[[1]]
topgenes_chicken_list[[2]]
View(logfc_filtered_topgenes_chicken_list)
logfc_filtered_topgenes_chicken_list[[1]]
View(logfc_filtered_topgenes_chicken_list)
logfc_filtered_topgenes_chicken_list[[1]]
View(all_de_genes)
View(de_genes_chicken_all)
View(logfc_filt_de_genes)
# Produce global heatmaps of gene expression for both chicken and E. tenella using both p-values and log fold change
create_gene_heatmap_df <- function(de_gene_list, heatmap_value, gene_names, timepoints) {
# de_gene_list is a list of DEGlist objects after performing a DE analysis
# heatmap_value is a string with a value of either "FDR" or "logFC" depending on what the heatmap should show
# gene_names is a vector of gene names in the analysis
# timepoints is a vector of time points at which the samples were taken
mapped_val_df <- as.data.frame(matrix(0,
ncol = length(de_gene_list),
nrow = dim(de_gene_list[[1]])[1]))
colnames(mapped_val_df) <- timepoints
rownames(mapped_val_df) <- gene_names
if (heatmap_value == "FDR") {
i <- 0
while (i < length(de_gene_list)) {
i <- i + 1
m <- match(gene_names, rownames(de_gene_list[[i]]$table))
mapped_val_df[,i] <- -log10(de_gene_list[[i]]$table[m,]$FDR)
}
} else if(heatmap_value == "logFC") {
i <- 0
while (i < length(de_gene_list)) {
i <- i + 1
m <- match(gene_names, rownames(de_gene_list[[i]]$table))
mapped_val_df[,i] <- de_gene_list[[i]]$table[m,]$logFC
}
}
return(mapped_val_df)
}
filter_gene_heatmap_df <- function(gene_heatmap_df, de_gene_list) {
m <- match(de_gene_list, rownames(gene_heatmap_df))
m <- m[complete.cases(m)]
return(gene_heatmap_df[m,])
}
chicken_fdr_df <- create_gene_heatmap_df(topgenes_chicken_list, "FDR", rownames(topgenes_chicken_list[[1]]$table), timepoints)
View(chicken_fdr_df)
chicken_logfc_df <- create_gene_heatmap_df(topgenes_chicken_list, "logFC", rownames(topgenes_chicken_list[[1]]$table), timepoints)
View(chicken_logfc_df)
eimeria_fdr_df <- create_gene_heatmap_df(topgenes_chicken_list, "FDR", rownames(topgenes_chicken_list[[1]]$table), timepoints)
eimeria_logfc_df <- create_gene_heatmap_df(topgenes_chicken_list, "logFC", rownames(topgenes_chicken_list[[1]]$table), timepoints)
egGENENAME <- toTable(org.Gg.egGENENAME)
i <- 0
while (i < length(de_genes_chicken)) {
i <- i + 1
df_temp <- de_genes_chicken[[i]][,c("gene_name", "entrez_gene_id", "FDR")]
if (i == 1) {
all_de_genes_chicken <- df_temp
} else {
all_de_genes_chicken <- rbind(all_de_genes_chicken, df_temp)
}
}
all_de_genes_chicken <- all_de_genes_chicken[order(all_de_genes_chicken$FDR),]
all_de_genes_chicken <- all_de_genes_chicken[!duplicated(all_de_genes_chicken[,c("gene_name","entrez_gene_id")]),]
all_de_genes_chicken$description <- egGENENAME[match(all_de_genes_chicken$entrez_gene_id, egGENENAME$gene_id),]$gene_name
write.table(all_de_genes_chicken, "results/de_analysis/all_de_genes_chicken.csv", sep = ",", row.names = FALSE)
i <- 0
while (i < length(de_genes_eimeria)) {
i <- i + 1
df_temp <- de_genes_eimeria[[i]][,c("gene_name", "entrez_gene_id", "FDR")]
if (i == 1) {
all_de_genes_eimeria <- df_temp
} else {
all_de_genes_eimeria <- rbind(all_de_genes_eimeria, df_temp)
}
}
all_de_genes_eimeria <- all_de_genes_eimeria[order(all_de_genes_eimeria$FDR),]
all_de_genes_eimeria <- all_de_genes_eimeria[!duplicated(all_de_genes_eimeria[,c("gene_name","entrez_gene_id")]),]
write.table(all_de_genes_eimeria, "results/de_analysis/all_de_genes_eimeria.csv", sep = ",", row.names = FALSE)
i <- 0
while (i < length(de_genes_chicken_all)) {
i <- i + 1
df_temp <- de_genes_chicken_all[[i]][,c("gene_name", "entrez_gene_id", "FDR")]
if (i == 1) {
logfc_filt_de_genes_chicken <- df_temp
} else {
logfc_filt_de_genes_chicken <- rbind(logfc_filt_de_genes_chicken, df_temp)
}
}
logfc_filt_de_genes_chicken <- logfc_filt_de_genes_chicken[order(logfc_filt_de_genes$FDR),]
logfc_filt_de_genes_chicken <- logfc_filt_de_genes_chicken[!duplicated(logfc_filt_de_genes_chicken[,c("gene_name","entrez_gene_id")]),]
logfc_filt_de_genes_chicken$description <- egGENENAME[match(logfc_filt_de_genes_chicken$entrez_gene_id, egGENENAME$gene_id),]$gene_name
write.table(logfc_filt_de_genes_chicken, "results/de_analysis/logfc_filt_de_genes_chicken.csv", sep = ",", row.names = FALSE)
i <- 0
while (i < length(de_genes_eimeria_all)) {
i <- i + 1
df_temp <- de_genes_eimeria_all[[i]][,c("gene_name", "entrez_gene_id", "FDR")]
if (i == 1) {
logfc_filt_de_genes_eimeria <- df_temp
} else {
logfc_filt_de_genes_eimeria <- rbind(logfc_filt_de_genes_eimeria, df_temp)
}
}
logfc_filt_de_genes_eimeria <- logfc_filt_de_genes_eimeria[order(logfc_filt_de_genes$FDR),]
logfc_filt_de_genes_eimeria <- logfc_filt_de_genes_eimeria[!duplicated(logfc_filt_de_genes_eimeria[,c("gene_name","entrez_gene_id")]),]
write.table(logfc_filt_de_genes_eimeria, "results/de_analysis/logfc_filt_de_genes_eimeria.csv", sep = ",", row.names = FALSE)
View(de_genes_eimeria)
de_genes_eimeria[[1]]
egGENENAME <- toTable(org.Gg.egGENENAME)
i <- 0
while (i < length(de_genes_chicken)) {
i <- i + 1
df_temp <- de_genes_chicken[[i]][,c("gene_name", "entrez_gene_id", "FDR")]
if (i == 1) {
all_de_genes_chicken <- df_temp
} else {
all_de_genes_chicken <- rbind(all_de_genes_chicken, df_temp)
}
}
all_de_genes_chicken <- all_de_genes_chicken[order(all_de_genes_chicken$FDR),]
all_de_genes_chicken <- all_de_genes_chicken[!duplicated(all_de_genes_chicken[,c("gene_name","entrez_gene_id")]),]
all_de_genes_chicken$description <- egGENENAME[match(all_de_genes_chicken$entrez_gene_id, egGENENAME$gene_id),]$gene_name
write.table(all_de_genes_chicken, "results/de_analysis/all_de_genes_chicken.csv", sep = ",", row.names = FALSE)
i <- 0
while (i < length(de_genes_eimeria)) {
i <- i + 1
df_temp <- de_genes_eimeria[[i]][,c("locus_tag", "entrez_gene_id", "FDR")]
if (i == 1) {
all_de_genes_eimeria <- df_temp
} else {
all_de_genes_eimeria <- rbind(all_de_genes_eimeria, df_temp)
}
}
all_de_genes_eimeria <- all_de_genes_eimeria[order(all_de_genes_eimeria$FDR),]
all_de_genes_eimeria <- all_de_genes_eimeria[!duplicated(all_de_genes_eimeria[,c("locus_tag","entrez_gene_id")]),]
write.table(all_de_genes_eimeria, "results/de_analysis/all_de_genes_eimeria.csv", sep = ",", row.names = FALSE)
i <- 0
while (i < length(de_genes_chicken_all)) {
i <- i + 1
df_temp <- de_genes_chicken_all[[i]][,c("gene_name", "entrez_gene_id", "FDR")]
if (i == 1) {
logfc_filt_de_genes_chicken <- df_temp
} else {
logfc_filt_de_genes_chicken <- rbind(logfc_filt_de_genes_chicken, df_temp)
}
}
logfc_filt_de_genes_chicken <- logfc_filt_de_genes_chicken[order(logfc_filt_de_genes$FDR),]
logfc_filt_de_genes_chicken <- logfc_filt_de_genes_chicken[!duplicated(logfc_filt_de_genes_chicken[,c("gene_name","entrez_gene_id")]),]
logfc_filt_de_genes_chicken$description <- egGENENAME[match(logfc_filt_de_genes_chicken$entrez_gene_id, egGENENAME$gene_id),]$gene_name
write.table(logfc_filt_de_genes_chicken, "results/de_analysis/logfc_filt_de_genes_chicken.csv", sep = ",", row.names = FALSE)
i <- 0
while (i < length(de_genes_eimeria_all)) {
i <- i + 1
df_temp <- de_genes_eimeria_all[[i]][,c("locus_tag", "entrez_gene_id", "FDR")]
if (i == 1) {
logfc_filt_de_genes_eimeria <- df_temp
} else {
logfc_filt_de_genes_eimeria <- rbind(logfc_filt_de_genes_eimeria, df_temp)
}
}
logfc_filt_de_genes_eimeria <- logfc_filt_de_genes_eimeria[order(logfc_filt_de_genes$FDR),]
logfc_filt_de_genes_eimeria <- logfc_filt_de_genes_eimeria[!duplicated(logfc_filt_de_genes_eimeria[,c("locus_tag","entrez_gene_id")]),]
write.table(logfc_filt_de_genes_eimeria, "results/de_analysis/logfc_filt_de_genes_eimeria.csv", sep = ",", row.names = FALSE)
chicken_fdr_df_filt <- filter_gene_heatmap_df(chicken_fdr_df, rownames(logfc_filt_de_genes))
chicken_logfc_df_filt <- filter_gene_heatmap_df(chicken_logfc_df, rownames(logfc_filt_de_genes))
eimeria_fdr_df_filt <- filter_gene_heatmap_df(eimeria_fdr_df, rownames(logfc_filt_de_genes))
eimeria_logfc_df_filt <- filter_gene_heatmap_df(eimeria_logfc_df, rownames(logfc_filt_de_genes))
View(eimeria_logfc_df_filt)
chicken_fdr_df_filt <- filter_gene_heatmap_df(chicken_fdr_df, rownames(logfc_filt_de_genes_chicken))
chicken_logfc_df_filt <- filter_gene_heatmap_df(chicken_logfc_df, rownames(logfc_filt_de_genes_chicken))
eimeria_fdr_df_filt <- filter_gene_heatmap_df(eimeria_fdr_df, rownames(logfc_filt_de_genes_eimeria))
eimeria_logfc_df_filt <- filter_gene_heatmap_df(eimeria_logfc_df, rownames(logfc_filt_de_genes_eimeria))
View(eimeria_logfc_df_filt)
View(chicken_logfc_df_filt)
View(chicken_fdr_df_filt)
View(eimeria_fdr_df)
eimeria_fdr_df <- create_gene_heatmap_df(topgenes_chicken_list, "FDR", rownames(topgenes_eimeria_list[[1]]$table), timepoints)
rownames(topgenes_eimeria_list[[1]]$table)
length(rownames(topgenes_eimeria_list[[1]]$table))
dim(topgenes_chicken_list[[1]])[1]
dim(topgenes_eimeria_list[[1]])[1]
eimeria_fdr_df <- create_gene_heatmap_df(topgenes_eimeria_list, "FDR", rownames(topgenes_eimeria_list[[1]]$table), timepoints)
eimeria_logfc_df <- create_gene_heatmap_df(topgenes_eimeria_list, "logFC", rownames(topgenes_eimeria_list[[1]]$table), timepoints)
eimeria_fdr_df_filt <- filter_gene_heatmap_df(eimeria_fdr_df, rownames(logfc_filt_de_genes_eimeria))
eimeria_logfc_df_filt <- filter_gene_heatmap_df(eimeria_logfc_df, rownames(logfc_filt_de_genes_eimeria))
View(eimeria_fdr_df_filt)
aspectHeatmap(as.matrix(chicken_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene p-values")
?heatmap
?colorRampPalette
aspectHeatmap(as.matrix(chicken_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene p-values", col = colorRampPalette(brewer.pal(8, "Spectral"))(25))
library(RColorBrewer)
aspectHeatmap(as.matrix(chicken_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene p-values", col = colorRampPalette(brewer.pal(8, "Spectral"))(25))
aspectHeatmap(as.matrix(chicken_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene p-values", col = colorRampPalette(brewer.pal(8, "RdYlBu"))(25))
aspectHeatmap(as.matrix(chicken_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene p-values", col = colorRampPalette(brewer.pal(8, "YlOrRd"))(25))
brewer_pal()
?brewer.pal
aspectHeatmap(as.matrix(chicken_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene p-values", col = colorRampPalette(brewer.pal(9, "YlOrRd"))(50))
aspectHeatmap(as.matrix(chicken_logfc_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene log fold change", col = colorRampPalette(brewer.pal(9, "RdYlBu"))(50))
aspectHeatmap(as.matrix(kegg_chicken_pval_list_filtered[[1]]), Colv = NA,
xlab = "Timepoints", main = "E. tenella gene p-values", col = colorRampPalette(brewer.pal(9, "YlOrRd"))(50))
aspectHeatmap(as.matrix(go_chicken_pval_list_filtered[[1]]), Colv = NA,
xlab = "Timepoints", main = "Upregulated GO categories", hExp = 5, wExp = 0.8, col = colorRampPalette(brewer.pal(9, "YlOrRd"))(50))
heatmap_path <- "figures/heatmaps/GO_cat_upregulated.pdf"
pdf(heatmap_path, width = 60, height = 180, pointsize = 60)
aspectHeatmap(as.matrix(go_chicken_pval_list_filtered[[1]]), Colv = NA,
xlab = "Timepoints", main = "Upregulated GO categories", hExp = 5, wExp = 0.8, col = colorRampPalette(brewer.pal(9, "YlOrRd"))(50))
dev.off()
aspectHeatmap(as.matrix(chicken_logfc_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene log fold change", col = colorRampPalette(brewer.pal(9, "RdYlGn"))(50))
aspectHeatmap(as.matrix(chicken_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene p-values", col = colorRampPalette(brewer.pal(9, "YlOrRd"))(500))
aspectHeatmap(as.matrix(chicken_logfc_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene log fold change", col = colorRampPalette(brewer.pal(9, "RdYlGn"))(500))
aspectHeatmap(as.matrix(eimeria_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "E. tenella gene p-values", col = colorRampPalette(brewer.pal(9, "YlOrRd"))(500))
aspectHeatmap(as.matrix(eimeria_logfc_df_filt), Colv = NA,
xlab = "Timepoints", main = "E. tenella gene log fold change", col = colorRampPalette(brewer.pal(9, "RdYlGn"))(500))
aspectHeatmap(as.matrix(chicken_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene p-values",
col = colorRampPalette(brewer.pal(9, "YlOrRd"))(500),
hExp = 5, wExp = 0.8)
heatmap_path <- "figures/heatmaps/chicken_genes_pval.pdf"
pdf(heatmap_path, width = 60, height = 180, pointsize = 60)
aspectHeatmap(as.matrix(chicken_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene p-values",
col = colorRampPalette(brewer.pal(9, "YlOrRd"))(500),
hExp = 5, wExp = 0.8)
dev.off()
heatmap_path <- "figures/heatmaps/chicken_genes_pval.pdf"
pdf(heatmap_path, width = 60, height = 180, pointsize = 60)
aspectHeatmap(as.matrix(chicken_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene p-values",
col = colorRampPalette(brewer.pal(9, "YlOrRd"))(500),
hExp = 10, wExp = 0.8)
dev.off()
heatmap_path <- "figures/heatmaps/chicken_genes_pval.pdf"
pdf(heatmap_path, width = 30, height = 240, pointsize = 60)
aspectHeatmap(as.matrix(chicken_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene p-values",
col = colorRampPalette(brewer.pal(9, "YlOrRd"))(500),
hExp = 10, wExp = 0.8)
dev.off()
heatmap_path <- "figures/heatmaps/chicken_genes_pval.pdf"
pdf(heatmap_path, width = 30, height = 240, pointsize = 60)
aspectHeatmap(as.matrix(chicken_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene p-values",
col = colorRampPalette(brewer.pal(9, "YlOrRd"))(500),
hExp = 20, wExp = 0.8)
dev.off()
pdf(heatmap_path, width = 50, height = 240, pointsize = 30)
aspectHeatmap(as.matrix(chicken_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene p-values",
col = colorRampPalette(brewer.pal(9, "YlOrRd"))(500),
hExp = 20, wExp = 0.8)
dev.off()
pdf(heatmap_path, width = 30, height = 240, pointsize = 60)
aspectHeatmap(as.matrix(chicken_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene p-values",
col = colorRampPalette(brewer.pal(9, "YlOrRd"))(500),
hExp = 20, wExp = 0.8)
dev.off()
pdf(heatmap_path, width = 30, height = 240, pointsize = 60)
aspectHeatmap(as.matrix(chicken_fdr_df_filt), Colv = NA,
xlab = "Timepoints", main = "Chicken gene p-values",
col = colorRampPalette(brewer.pal(9, "YlOrRd"))(500),
hExp = 20, wExp = 1)
dev.off()
